/// \file TrackDrivenSeedingTool.cc
/*
 *
 * TrackDrivenSeedingTool.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 24 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborTools/TrackDrivenSeedingTool.h"

#include "ArborHelpers/GeometryHelper.h"

#include "Pandora/AlgorithmHeaders.h"
#include "Pandora/Algorithm.h"

#include "ArborObjects/CaloHit.h"
#include "ArborObjects/Connector.h"
#include "ArborHelpers/CaloHitHelper.h"

namespace arbor_content
{

  pandora::StatusCode TrackDrivenSeedingTool::Process(const pandora::Algorithm &algorithm, const pandora::CaloHitList *const pCaloHitList)
  {
    if(pCaloHitList->empty())
      return pandora::STATUS_CODE_SUCCESS;

    // get current track list
    const pandora::TrackList *pTrackList = NULL;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(algorithm, pTrackList));      
    //std::cout << "pTrackList: " << pTrackList->size() << std::endl;

    if(pTrackList->empty())
      return pandora::STATUS_CODE_SUCCESS;

    for(pandora::TrackList::const_iterator trackIter = pTrackList->begin(), trackEndIter = pTrackList->end() ;
        trackEndIter != trackIter ; ++trackIter)
    {
      const pandora::Track *pTrack = *trackIter;

      if(!pTrack->ReachesCalorimeter() || !pTrack->CanFormPfo())
        continue;

      pandora::CaloHitVector caloHitVector;
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->FindInitialCaloHits(algorithm, pTrack, pCaloHitList, caloHitVector));
      PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->ConnectCaloHits(algorithm, pTrack, pCaloHitList, caloHitVector));
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackDrivenSeedingTool::FindInitialCaloHits(const pandora::Algorithm &algorithm, const pandora::Track *pTrack, const pandora::CaloHitList *const pInputCaloHitList,
      pandora::CaloHitVector &caloHitVector)
  {
    const float bField(PandoraContentApi::GetPlugins(algorithm)->GetBFieldPlugin()->GetBField(pandora::CartesianVector(0.f, 0.f, 0.f)));
    const pandora::Helix helix(pTrack->GetTrackStateAtCalorimeter().GetPosition(),
        pTrack->GetTrackStateAtCalorimeter().GetMomentum(), pTrack->GetCharge(), bField);

    for(pandora::CaloHitList::const_iterator iter = pInputCaloHitList->begin(), endIter = pInputCaloHitList->end() ;
        endIter != iter ; ++iter)
    {
      const pandora::CaloHit *const pCaloHit = *iter;

      if( ! PandoraContentApi::IsAvailable<pandora::CaloHit>( algorithm, pCaloHit ) )
        continue;

      if(pCaloHit->GetPseudoLayer() > m_maxInitialPseudoLayer)
        continue;

      if(!m_shouldUseIsolatedHits && pCaloHit->IsIsolated())
        continue;

      pandora::CartesianVector projectionOnHelix(0.f, 0.f, 0.f);

      if(pandora::STATUS_CODE_SUCCESS != GeometryHelper::GetProjectionOnHelix(helix, pCaloHit->GetPositionVector(), projectionOnHelix))
        continue;

      if((projectionOnHelix-pCaloHit->GetPositionVector()).GetMagnitude() > m_maxInitialTrackDistance)
        continue;

      caloHitVector.push_back(pCaloHit);
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackDrivenSeedingTool::ConnectCaloHits(const pandora::Algorithm &algorithm, const pandora::Track *pTrack, const pandora::CaloHitList *const pInputCaloHitList,
      pandora::CaloHitVector &caloHitVector)
  {
    if(caloHitVector.empty())
      return pandora::STATUS_CODE_SUCCESS;

    // buidl ordered calo hit list
    pandora::OrderedCaloHitList orderedCaloHitList;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, orderedCaloHitList.Add(*pInputCaloHitList));

    // get b field and track helix
    const float bField(PandoraContentApi::GetPlugins(algorithm)->GetBFieldPlugin()->GetBField(pandora::CartesianVector(0.f, 0.f, 0.f)));
    const pandora::Helix helix(pTrack->GetTrackStateAtCalorimeter().GetPosition(),
        pTrack->GetTrackStateAtCalorimeter().GetMomentum(), pTrack->GetCharge(), bField);

    for(size_t i=0 ; i<caloHitVector.size() ; i++)
    {
      const arbor_content::CaloHit *const pCaloHit = dynamic_cast<const arbor_content::CaloHit *const>(caloHitVector.at(i));

      if(!m_shouldUseIsolatedHits && pCaloHit->IsIsolated())
        continue;

      const pandora::CartesianVector &position(pCaloHit->GetPositionVector());
      const unsigned int pseudoLayer = pCaloHit->GetPseudoLayer();

      pandora::CartesianVector helixProjection(0.f, 0.f, 0.f);

      if(pandora::STATUS_CODE_SUCCESS != GeometryHelper::GetProjectionOnHelix(helix, position, helixProjection))
        continue;

      const pandora::CartesianVector extrapolatedMomentum(helix.GetExtrapolatedMomentum(helixProjection));
      const pandora::CartesianVector trackMomentum(pTrack->GetTrackStateAtCalorimeter().GetMomentum());

      pandora::OrderedCaloHitList::const_iterator plIter = orderedCaloHitList.find(pseudoLayer);

      // unexpected ???
      if(orderedCaloHitList.end() == plIter || plIter->second->empty())
        continue;

      // start to next pseudo layer
      plIter++;

      if(orderedCaloHitList.end() == plIter || plIter->second->empty())
        continue;

      while(1)
      {
        if(plIter == orderedCaloHitList.end())
          break;

        if(plIter->first > pseudoLayer+m_maxConnectionPseudoLayer)
          break;

        if(!plIter->second->empty())
        {
          for(pandora::CaloHitList::const_iterator iter = plIter->second->begin(), endIter = plIter->second->end() ;
              endIter != iter ; ++iter)
          {
            const arbor_content::CaloHit *const pTestCaloHit = dynamic_cast<const arbor_content::CaloHit *const>(*iter);

            if( ! PandoraContentApi::IsAvailable<pandora::CaloHit>( algorithm, pTestCaloHit ) )
              continue;

            const pandora::Granularity &granularity(algorithm.GetPandora().GetGeometry()->GetHitTypeGranularity(pTestCaloHit->GetHitType()));
            const float maxTransverseDistance = (granularity >= pandora::COARSE) ? m_maxTransverseDistanceCoarse : m_maxTransverseDistanceFine;
            const float maxDistanceToTrack = (granularity >= pandora::COARSE) ? m_maxDistanceToTrackCoarse : m_maxDistanceToTrackFine;

            const pandora::CartesianVector caloHitsVector(pTestCaloHit->GetPositionVector() - pCaloHit->GetPositionVector());
            const float caloHitsAngle = caloHitsVector.GetOpeningAngle(extrapolatedMomentum);
            const float longitudinalDistance = caloHitsVector.GetMagnitude()*cos(caloHitsAngle);
            const float transverseDistance = caloHitsVector.GetMagnitude()*sin(caloHitsAngle);

            pandora::CartesianVector distanceToHelix(0.f, 0.f, 0.f);
            helix.GetDistanceToPoint(pTestCaloHit->GetPositionVector(), distanceToHelix);

            if(longitudinalDistance < 0.f)
              continue;

            if(transverseDistance > maxTransverseDistance)
              continue;

            if(distanceToHelix.GetZ() > maxDistanceToTrack)
              continue;

            // check for existing connection
            if(ArborContentApi::IsConnected(pCaloHit, pTestCaloHit, arbor_content::FORWARD_DIRECTION))
              continue;

            PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::Connect(pCaloHit, pTestCaloHit, arbor_content::FORWARD_DIRECTION));

            // add it if not done
            if(std::find(caloHitVector.begin(), caloHitVector.end(), pTestCaloHit) == caloHitVector.end())
              caloHitVector.push_back(pTestCaloHit);
          }
        }

        ++plIter;
      }
    }

    return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode TrackDrivenSeedingTool::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
    m_maxInitialPseudoLayer = 3;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxInitialPseudoLayer", m_maxInitialPseudoLayer));

    m_maxInitialTrackDistance = 20.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxInitialTrackDistance", m_maxInitialTrackDistance));

    m_maxInitialTrackAngle = 0.9f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxInitialTrackAngle", m_maxInitialTrackAngle));

    m_maxConnectionPseudoLayer = 4;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxConnectionPseudoLayer", m_maxConnectionPseudoLayer));

    m_maxTransverseDistanceFine = 20.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxTransverseDistanceFine", m_maxTransverseDistanceFine));

    m_maxTransverseDistanceCoarse = 40.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxTransverseDistanceCoarse", m_maxTransverseDistanceCoarse));

    m_maxDistanceToTrackFine = std::numeric_limits<float>::max();
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxDistanceToTrackFine", m_maxDistanceToTrackFine));

    m_maxDistanceToTrackCoarse = std::numeric_limits<float>::max();
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MaxDistanceToTrackCoarse", m_maxDistanceToTrackCoarse));

    m_shouldUseIsolatedHits = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ShouldUseIsolatedHits", m_shouldUseIsolatedHits));

    return pandora::STATUS_CODE_SUCCESS;
  }

} 


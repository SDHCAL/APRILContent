  /// \file SemiPerfectPfoCreationAlgorithm.cc
/*
 *
 * SemiPerfectPfoCreationAlgorithm.cc source template automatically generated by a class generator
 * Creation date : sam. mars 21 2015
 *
 * This file is part of ArborContent libraries.
 *
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author John Marshall
 */

#include "Pandora/AlgorithmHeaders.h"
#include "Api/PandoraContentApi.h"

#include "ArborCheating/SemiPerfectPfoCreationAlgorithm.h"
#include "ArborHelpers/ClusterHelper.h"
#include "ArborHelpers/CaloHitHelper.h"
#include "ArborHelpers/ReclusterHelper.h"

namespace arbor_content
{

SemiPerfectPfoCreationAlgorithm::SemiPerfectPfoCreationAlgorithm() :
    m_shouldCreateTrackBasedPfos(true),
    m_shouldCreateNeutralPfos(true),
    m_minClusterHadronicEnergy(0.1f),
    m_minClusterElectromagneticEnergy(0.1f),
    m_minHitsInCluster(5),
    m_allowSingleLayerClusters(false),
    m_photonPositionAlgorithm(2)
{
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode SemiPerfectPfoCreationAlgorithm::Run()
{
	PandoraContentApi::RemoveAllTrackClusterAssociations(*this);

    const pandora::PfoList *pPfoList = NULL; std::string pfoListName;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::CreateTemporaryListAndSetCurrent(*this, pPfoList, pfoListName));

    if (m_shouldCreateTrackBasedPfos)
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->CreateTrackBasedPfos());

    if (!pPfoList->empty())
    {
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::SaveList<pandora::Pfo>(*this, m_outputPfoListName));
        PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ReplaceCurrentList<pandora::Pfo>(*this, m_outputPfoListName));
    }

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

void SemiPerfectPfoCreationAlgorithm::TrackCollection(const pandora::MCParticle *const pPfoTarget, PfoParameters &pfoParameters) const
{
    const pandora::TrackList *pTrackList = NULL;
    PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pTrackList));
	//std::cout << "---track size: " << pTrackList->size() << std::endl;

    for (pandora::TrackList::const_iterator iter = pTrackList->begin(), iterEnd = pTrackList->end(); iter != iterEnd; ++iter)
    {
        try
        {
            const pandora::Track *const pTrack = *iter;
            const pandora::MCParticle *const pTrkMCParticle(pandora::MCParticleHelper::GetMainMCParticle(pTrack));
            const pandora::MCParticle *const pTrkPfoTarget(pTrkMCParticle->GetPfoTarget());

            if (pTrkPfoTarget != pPfoTarget)
                continue;

            pfoParameters.m_trackList.push_back(pTrack);

			//std::cout << "found a track: " << pTrack << " for MCP: " << pTrkPfoTarget << std::endl;
        }
        catch (pandora::StatusCodeException &e)
        {
			//std::cout << e.ToString() << std::endl;
        }
    }
}

void SemiPerfectPfoCreationAlgorithm::CaloHitCollection(const pandora::MCParticle *const pPfoTarget, PfoParameters &pfoParameters) const
{
    const pandora::ClusterList *pClusterList = NULL;
    PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pClusterList));

    for (pandora::ClusterList::const_iterator iter = pClusterList->begin(), iterEnd = pClusterList->end(); iter != iterEnd; ++iter)
    {
        try
        {
            const pandora::Cluster *const pCluster = *iter;
            const pandora::MCParticle *const pClusterMCParticle(pandora::MCParticleHelper::GetMainMCParticle(pCluster));
            const pandora::MCParticle *const pClusterPfoTarget(pClusterMCParticle->GetPfoTarget());

            if (pClusterPfoTarget != pPfoTarget)
                continue;

            pfoParameters.m_clusterList.push_back(pCluster);

			//std::cout << "found a cluster: " << pCluster << " for MCP: " << pClusterPfoTarget << std::endl;
        }
        catch (pandora::StatusCodeException &e)
        {
			std::cout << e.ToString() << std::endl;
        }
    }
}

void SemiPerfectPfoCreationAlgorithm::SetPfoParametersFromTracks(const pandora::MCParticle *const pPfoTarget, int &nTracksUsed, PfoParameters &pfoParameters) const
{
    if (!pfoParameters.m_trackList.empty())
    {
        int charge(0);
        float energyWithPionMass(0.f), energyWithElectronMass(0.f);
		pandora::CartesianVector momentum(0.f, 0.f, 0.f);

        for (pandora::TrackList::const_iterator iter = pfoParameters.m_trackList.begin(), iterEnd = pfoParameters.m_trackList.end(); iter != iterEnd; ++iter)
        {
            const pandora::Track *const pTrack = *iter;

            if (!pTrack->CanFormPfo() && !pTrack->CanFormClusterlessPfo())
            {
                std::cout << pPfoTarget << " Drop track, E: " << pTrack->GetEnergyAtDca() << " cfp: " << pTrack->CanFormPfo() << " cfcp: " << pTrack->CanFormClusterlessPfo() << std::endl;
                continue;
            }

            if (!pTrack->GetParentList().empty())
            {
                std::cout << pPfoTarget << " Drop track, E: " << pTrack->GetEnergyAtDca() << " nParents: " << pTrack->GetParentList().size() << std::endl;
                continue;
            }

            ++nTracksUsed;

            // ATTN Assume neutral track-based pfos represent pair-production
            const float electronMass(pandora::PdgTable::GetParticleMass(pandora::E_MINUS));

            charge += pTrack->GetCharge();
            momentum += pTrack->GetMomentumAtDca();
            energyWithPionMass += pTrack->GetEnergyAtDca();
            energyWithElectronMass += std::sqrt(electronMass * electronMass + pTrack->GetMomentumAtDca().GetMagnitudeSquared());
        }

        if (0 == nTracksUsed)
            return;

        pfoParameters.m_charge = charge;
        pfoParameters.m_momentum = momentum;
        pfoParameters.m_particleId = (pfoParameters.m_charge.Get() == 0) ? pandora::PHOTON : (pfoParameters.m_charge.Get() < 0) ? pandora::PI_MINUS : pandora::PI_PLUS;
        pfoParameters.m_energy = (pfoParameters.m_particleId.Get() == pandora::PHOTON) ? energyWithElectronMass : energyWithPionMass;
        pfoParameters.m_mass = std::sqrt(std::max(pfoParameters.m_energy.Get() * pfoParameters.m_energy.Get() - pfoParameters.m_momentum.Get().GetDotProduct(pfoParameters.m_momentum.Get()), 0.f));
    }
}

/////////

void SemiPerfectPfoCreationAlgorithm::SetPfoParametersFromClusters(const pandora::MCParticle *const pPfoTarget, const int nTracksUsed, PfoParameters &pfoParameters) const
{
    const pandora::Cluster *pCluster = NULL;

    if (!pfoParameters.m_clusterList.empty())
    {
        if (1 != pfoParameters.m_clusterList.size())
            throw pandora::StatusCodeException(pandora::STATUS_CODE_FAILURE);

        pCluster = *(pfoParameters.m_clusterList.begin());
    }

    if ((0 == nTracksUsed) && !pfoParameters.m_clusterList.empty())
    {
        const bool isPhoton(pandora::PHOTON == pPfoTarget->GetParticleId());

        const float clusterEnergy(isPhoton ? pCluster->GetCorrectedElectromagneticEnergy(this->GetPandora()) :
            pCluster->GetCorrectedHadronicEnergy(this->GetPandora()));
        const pandora::CartesianVector positionVector(!isPhoton ? pCluster->GetCentroid(pCluster->GetInnerPseudoLayer()) :
            this->GetEnergyWeightedCentroid(pCluster, pCluster->GetInnerPseudoLayer(), pCluster->GetOuterPseudoLayer()));

        pfoParameters.m_particleId = (isPhoton ? pandora::PHOTON : pandora::NEUTRON);
        pfoParameters.m_charge = 0;
        pfoParameters.m_mass = (isPhoton ? pandora::PdgTable::GetParticleMass(pandora::PHOTON) : pandora::PdgTable::GetParticleMass(pandora::NEUTRON));
        pfoParameters.m_energy = clusterEnergy;
        pfoParameters.m_momentum = positionVector.GetUnitVector() * clusterEnergy;
    }

    // Track-cluster associations hack
    if (NULL != pCluster)
    {
        for (pandora::TrackList::const_iterator iterTrk = pfoParameters.m_trackList.begin(), iterTrkEnd = pfoParameters.m_trackList.end(); iterTrk != iterTrkEnd; ++iterTrk)
            PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddTrackClusterAssociation(*this, *iterTrk, pCluster));
    }
}

pandora::StatusCode SemiPerfectPfoCreationAlgorithm::CreateTrackBasedPfos() const
{
    const pandora::MCParticleList *pMCParticleList = NULL;
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pMCParticleList));

    if (pMCParticleList->empty())
        return pandora::STATUS_CODE_SUCCESS;

    for (pandora::MCParticleList::const_iterator iterMC = pMCParticleList->begin(), iterMCEnd = pMCParticleList->end(); iterMC != iterMCEnd; ++iterMC)
    {
        try
        {
            const pandora::MCParticle *const pPfoTarget = *iterMC;
			//std::cout << "pfoTarget: " << pPfoTarget << std::endl;
            PfoParameters pfoParameters;

            this->TrackCollection(pPfoTarget, pfoParameters);
            this->CaloHitCollection(pPfoTarget, pfoParameters);

			/////
            int nTracksUsed(0);
            this->SetPfoParametersFromTracks(pPfoTarget, nTracksUsed, pfoParameters);
            this->SetPfoParametersFromClusters(pPfoTarget, nTracksUsed, pfoParameters);

            if ((0 == nTracksUsed) && pfoParameters.m_clusterList.empty())
            {
                std::cout << pPfoTarget << " No energy deposits for pfo target " << pPfoTarget->GetParticleId() 
					      << ", E: " << pPfoTarget->GetEnergy() << std::endl;
                throw pandora::StatusCodeException(pandora::STATUS_CODE_INVALID_PARAMETER);
            }

            const pandora::ParticleFlowObject *pPfo(NULL);
            PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::ParticleFlowObject::Create(*this, pfoParameters, pPfo));
		}
        catch (pandora::StatusCodeException &)
		{
		}
	}

    return pandora::STATUS_CODE_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------

const pandora::CartesianVector SemiPerfectPfoCreationAlgorithm::GetEnergyWeightedCentroid(const pandora::Cluster *const pCluster, const unsigned int innerPseudoLayer,
    const unsigned int outerPseudoLayer) const
{
    float energySum(0.f);
    pandora::CartesianVector energyPositionSum(0.f, 0.f, 0.f);
    const pandora::OrderedCaloHitList &orderedCaloHitList(pCluster->GetOrderedCaloHitList());

    for (pandora::OrderedCaloHitList::const_iterator iter = orderedCaloHitList.begin(), iterEnd = orderedCaloHitList.end(); iter != iterEnd; ++iter)
    {
        if (iter->first > outerPseudoLayer)
            break;

        if (iter->first < innerPseudoLayer)
            continue;

        for (pandora::CaloHitList::const_iterator hitIter = iter->second->begin(), hitIterEnd = iter->second->end(); hitIter != hitIterEnd; ++hitIter)
        {
            const float electromagneticEnergy((*hitIter)->GetElectromagneticEnergy());
            energySum += electromagneticEnergy;
            energyPositionSum += ((*hitIter)->GetPositionVector() * electromagneticEnergy);
        }
    }

    if (energySum < std::numeric_limits<float>::epsilon())
        throw pandora::StatusCodeException(pandora::STATUS_CODE_NOT_INITIALIZED);

    return (energyPositionSum * (1.f / energySum));
}

//------------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode SemiPerfectPfoCreationAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "OutputPfoListName", m_outputPfoListName));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ShouldCreateTrackBasedPfos", m_shouldCreateTrackBasedPfos));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ShouldCreateNeutralPfos", m_shouldCreateNeutralPfos));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MinClusterHadronicEnergy", m_minClusterHadronicEnergy));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MinClusterElectromagneticEnergy", m_minClusterElectromagneticEnergy));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "MinHitsInCluster", m_minHitsInCluster));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "AllowSingleLayerClusters", m_allowSingleLayerClusters));

    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "PhotonPositionAlgorithm", m_photonPositionAlgorithm));

    return pandora::STATUS_CODE_SUCCESS;
}

}

  /// \file ArborInputTypes.h
/*
 *
 * ArborInputTypes.h header template automatically generated by a class generator
 * Creation date : lun. mars 30 2015
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORINPUTTYPES_H
#define ARBORINPUTTYPES_H

#include "Pandora/PandoraInputTypes.h"

#include <bitset>

namespace arbor_content
{

//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  SemiDigitalThreshold enumerator
 */
enum SemiDigitalThreshold
{
	THRESHOLD_1 = 1,
	THRESHOLD_2 = 2,
	THRESHOLD_3 = 3
};

//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  ConnectorDirection enumerator
 */
enum ConnectorDirection
{
	BACKWARD_DIRECTION = -1,
	FORWARD_DIRECTION = 1
};

//------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief  HitTag enumerator
 */
enum HitTag
{
	CORE_HIT,
	ISOLATED_HIT,
	MIP_HIT,
	NOISE_HIT,
	NUMBER_OF_HIT_TAGS
};

//------------------------------------------------------------------------------------------------------------------------------------------

class Connector;
class CaloHit;
class Branch;
class Track;
class ConnectorAlgorithmTool;

typedef std::set<const CaloHit *> CaloHitList;
typedef std::set<const Track *> TrackList;
typedef std::set<const Connector *> ConnectorList;

typedef std::map<const pandora::Cluster *, const pandora::Cluster *> ClusterToClusterMap;
typedef std::map<const pandora::CaloHit *, const pandora::Cluster *> CaloHitToClusterMap;

typedef std::vector<ConnectorAlgorithmTool *> ConnectorAlgorithmToolVector;
typedef std::vector<SemiDigitalThreshold> SemiDigitalThresholdList;
typedef std::bitset<NUMBER_OF_HIT_TAGS> HitTagMap;

typedef pandora::PandoraInputType<SemiDigitalThreshold> InputSemiDigitalThreshold;
typedef pandora::PandoraInputType<SemiDigitalThresholdList> InputSemiDigitalThresholdList;

typedef std::vector<Branch>  BranchList;

}

namespace pandora
{

// PandoraInputType template specialization for new defined types
//------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------

template <>
inline bool pandora::PandoraInputType<arbor_content::SemiDigitalThresholdList>::IsValid(const arbor_content::SemiDigitalThresholdList &list) const
{
	if(list.empty())
		return false;

	for(unsigned int i=0 ; i<list.size() ; i++)
	{
		if( !(std::isnan(static_cast<unsigned int>(list.at(i))) || std::isinf(static_cast<unsigned int>(list.at(i)))) )
			return false;
	}

	return true;
}

//------------------------------------------------------------------------------------------------------------------------------------------

template <>
inline bool pandora::PandoraInputType<arbor_content::SemiDigitalThreshold>::IsValid(const arbor_content::SemiDigitalThreshold &t) const
{
	return !(std::isnan(static_cast<unsigned int>(t)) || std::isinf(static_cast<unsigned int>(t)));
}

}

#endif  //  ARBORINPUTTYPES_H

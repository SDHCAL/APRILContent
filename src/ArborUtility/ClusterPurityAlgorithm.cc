/// \file ClusterPurityAlgorithm.cc
/*
 *
 * ClusterPurityAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. juin 2 2016
 *
 * This file is part of ArborContent libraries.
 * 
 * ArborContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "ArborUtility/ClusterPurityAlgorithm.h"

#include "Pandora/AlgorithmHeaders.h"
#include "ArborApi/ArborContentApi.h"
#include "ArborObjects/CaloHit.h"
#include "ArborHelpers/GeometryHelper.h"
#include "ArborHelpers/ReclusterHelper.h"

#include "ArborHelpers/HistogramHelper.h"
using namespace pandora;

namespace arbor_content
{

  pandora::StatusCode ClusterPurityAlgorithm::Run()
  {
    extern HistogramManager AHM;

	////////
    const pandora::PfoList *pPfoList = NULL; 
    PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentList(*this, pPfoList));
	std::cout << "------- # PFO : " << pPfoList->size() << std::endl;

    for(pandora::PfoList::const_iterator iter = pPfoList->begin(), endIter = pPfoList->end(); endIter != iter ; ++iter)
    {
		const pandora::ParticleFlowObject* pfo = *iter;
		//std::cout << "PFO : " << pfo << ", PID: " << pfoPID << ", charge: " << pfoCharge << std::endl;

		const pandora::ClusterList& pfoClusterList = pfo->GetClusterList();
    
		for(pandora::ClusterList::const_iterator cluIter = pfoClusterList.begin(); cluIter != pfoClusterList.end(); ++cluIter)
		{
			//std::cout << "cluster: " << *cluIter << std::endl;
			const pandora::Cluster* cluster = *cluIter;

    		try
    		{
				float hitPurity;
				float energyPurity;
				float ordClusterHit;

				getPurity(cluster, hitPurity, energyPurity, ordClusterHit);

				float clusterSize = cluster->GetNCaloHits();
				float clusterEnergy = cluster->GetHadronicEnergy();
	
				std::vector<float> vars;
				vars.push_back( clusterSize );
				vars.push_back( ordClusterHit );
				vars.push_back( clusterEnergy );
				vars.push_back( hitPurity );
				vars.push_back( energyPurity );

				AHM.CreateFill("ClusterPurity", "clusterSize:orderedClusterHit:clusterEnergy:hitPurity:energyPurity", vars);

				//std::cout << "cluster energy: " << clusterEnergy << ", purity: " << clusterPurity << ", size: " << clusterSize 
				//	      << std::endl;

				//histogram.Fill(clusterSize, clusterEnergy, clusterPurity);
    		}
    		catch (pandora::StatusCodeException &)
    		{
    		}
		}
	}

    return pandora::STATUS_CODE_SUCCESS;
  }

  pandora::StatusCode ClusterPurityAlgorithm::getPurity(const pandora::Cluster* cluster, float& hitPurity, float& energyPurity, 
		   float& ordClusterHit) const
  {
	  const pandora::MCParticle *const pMCClusterParticle(pandora::MCParticleHelper::GetMainMCParticle(cluster));
	  //std::cout << "Cluster : " << cluster << ", mcp: " << pMCClusterParticle << std::endl;

	  pandora::CaloHitList caloHitList;
	  cluster->GetOrderedCaloHitList().FillCaloHitList(caloHitList);

	  float clusterHitEnergy = 0.;

	  // FIXME
	  // this is not equal to caloHitList.size() 
	  // since some hits may be lost due to the exception to get main mcp of calo hit below
	  ordClusterHit = 0.;

	  float pureClusterEnergy = 0.;
	  float pureClusterHit = 0.;

      for(pandora::CaloHitList::const_iterator caloHitIter = caloHitList.begin(); caloHitIter != caloHitList.end(); ++caloHitIter)
      {
         const pandora::CaloHit* caloHit = *caloHitIter;
		 const pandora::MCParticle* caloHitMCP = NULL;

		 float hitEnergy = caloHit->GetHadronicEnergy();
    
         try
         {
         	const pandora::MCParticle *const pMCHitParticle(pandora::MCParticleHelper::GetMainMCParticle(caloHit));
         	//std::cout << "calo hit: " << caloHit << ", mcp: " << pMCHitParticle << std::endl;

			caloHitMCP = pMCHitParticle;
         }
         catch (pandora::StatusCodeException &)
         {
         }

		 if(caloHitMCP ==NULL) continue;

		 clusterHitEnergy += hitEnergy;

		 if( caloHitMCP == pMCClusterParticle )
		 {
			 pureClusterEnergy += hitEnergy;
			 ++pureClusterHit;
			 ++ordClusterHit;
		 }
		 else
		 {
			 std::cout << "purity degrading..." << std::endl;
		 }
	  }

	  hitPurity = pureClusterHit/ordClusterHit;
	  energyPurity = pureClusterEnergy/clusterHitEnergy;
    
	  return pandora::STATUS_CODE_SUCCESS;
  }

  pandora::StatusCode ClusterPurityAlgorithm::Initialize()
  {
	  return pandora::STATUS_CODE_SUCCESS;
  }

  //------------------------------------------------------------------------------------------------------------------------------------------

  pandora::StatusCode ClusterPurityAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
  {
	m_timing = false;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "ApplyTiming", m_timing));

    m_timeCut = 100.f;
    PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
        "TimeCut", m_timeCut));

    return pandora::STATUS_CODE_SUCCESS;
  }

}
